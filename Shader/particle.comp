#version 430 core

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct PStruct
{
	vec3 position;
	vec3 velocity;
	vec2 lifespan;
};

layout(std430, binding=0) buffer Particles
{
	PStruct particles[];
};

layout(location = 4) uniform float time;
layout(location = 5) uniform vec3 wgPos[5];

float rand(vec2 co){
return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) - 0.5;
}

void main(void)
{
	uint pid = gl_GlobalInvocationID.x;
	uint wgid = gl_WorkGroupID.x;

	particles[pid].position.x = clamp(particles[pid].position.x + particles[pid].velocity.x  * rand(vec2(time,pid)) * time, wgPos[wgid].x - 1.0, wgPos[wgid].x + 1.0);  
	particles[pid].position.y = clamp(particles[pid].position.y + particles[pid].velocity.y  * rand(vec2(time,pid)) * time, wgPos[wgid].y - 1.0, wgPos[wgid].y + 1.0);
	particles[pid].position.z = clamp(particles[pid].position.z + particles[pid].velocity.z  * rand(vec2(time,pid)) * time, wgPos[wgid].z - 1.0, wgPos[wgid].z + 1.0);

	particles[pid].lifespan.x = max(10 - time, 0);
}